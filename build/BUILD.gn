config("library_impl_config") {
  defines = [ "AVE_LIBRARY_IMPL" ]
}

config("common_inherited_config") {
  defines = []
  configs = []
  ldflags = []

  if (is_posix || is_fuchsia) {
    defines += [ "AVE_POSIX" ]
  }

  if (is_ios) {
    defines += [
      "AVE_MAC",
      "AVE_IOS",
    ]
  }
  if (is_linux || is_chromeos) {
    defines += [ "AVE_LINUX" ]
  }

  if (is_mac) {
    defines += [ "AVE_MAC" ]
  }

  if (is_fuchsia) {
    defines += [ "AVE_FUCHSIA" ]
  }

  if (is_win) {
    defines += [ "AVE_WIN" ]
  }

  if (is_android) {
    defines += [
      "AVE_LINUX",
      "AVE_ANDROID",
    ]
  }

  if (is_chromeos) {
    defines += [ "CHROMEOS" ]
  }
}

config("no_exit_time_destructors") {
  if (is_clang) {
    cflags = [ "-Wno-exit-time-destructors" ]
  }
}

config("no_global_constructors") {
  if (is_clang) {
    cflags = [ "-Wno-global-constructors" ]
  }
}

config("oc_prod_config") {
  if (is_clang) {
    cflags = [
      "-Wexit-time-destructors",
      "-Wglobal-constructors",
    ]
  }
}

config("thread_safety_annotations") {
  if (is_clang) {
    cflags = [
      "-Wthread-safety",

      # TODO(https://fxbug.dev/42085252): Clang is catching instances of these in the kernel and drivers.
      # Temporarily disable them for now to facilitate the roll then come back and
      # fix them.
      "-Wno-unknown-warning-option",
      "-Wno-thread-safety-reference-return",
    ]
    defines = [ "_LIBCPP_ENABLE_THREAD_SAFETY_ANNOTATIONS=1" ]
  }
}
