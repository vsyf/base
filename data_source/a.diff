diff --git a/BUILD.gn b/BUILD.gn
index a44fe9e..69c5a81 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -286,6 +286,7 @@ executable("base_unittests") {
     ":numerics_unittest",
     ":task_runner_unittest",
     ":task_util",
+    "test",
     "units:units_unittests_source",
     "//test:test_main",
     "//test:test_support",
diff --git a/buffer.h b/buffer.h
index e5ad5dc..3995fa9 100644
--- a/buffer.h
+++ b/buffer.h
@@ -8,7 +8,7 @@
 #ifndef BASE_BUFFER_H
 #define BASE_BUFFER_H
 
-#include <stdint.h>
+#include <cstdint>
 
 #include <algorithm>
 #include <cstring>
@@ -35,10 +35,10 @@ namespace internal {
 template <typename T, typename U>
 struct BufferCompat {
   static constexpr bool value =
-      !std::is_volatile<U>::value &&
-      ((std::is_integral<T>::value && sizeof(T) == 1)
-           ? (std::is_integral<U>::value && sizeof(U) == 1)
-           : (std::is_same<T, typename std::remove_const<U>::type>::value));
+      !std::is_volatile_v<U> &&
+      ((std::is_integral_v<T> && sizeof(T) == 1)
+           ? (std::is_integral_v<U> && sizeof(U) == 1)
+           : (std::is_same_v<T, typename std::remove_const_t<U>::type>));
 };
 
 }  // namespace internal
@@ -55,17 +55,19 @@ class BufferT {
   // deallocate. And we want T to be trivially copyable, so that we can copy T
   // instances with std::memcpy. This is precisely the definition of a trivial
   // type.
-  static_assert(std::is_trivial<T>::value, "T must be a trivial type.");
+  static_assert(std::is_trivial_v<T>, "T must be a trivial type.");
 
   // This class relies heavily on being able to mutate its data.
-  static_assert(!std::is_const<T>::value, "T may not be const");
+  static_assert(!std::is_const_v<T>, "T may not be const");
 
  public:
   using value_type = T;
   using const_iterator = const T*;
 
   // An empty BufferT.
-  BufferT() : size_(0), capacity_(0), data_(nullptr) { AVE_DCHECK(IsConsistent()); }
+  BufferT() : size_(0), capacity_(0), data_(nullptr) {
+    AVE_DCHECK(IsConsistent());
+  }
 
   // Disable copy construction and copy assignment, since copying a buffer is
   // expensive enough that we want to force the user to be explicit about it.
@@ -92,24 +94,22 @@ class BufferT {
 
   // Construct a buffer and copy the specified number of elements into it.
   template <typename U,
-            typename std::enable_if<
-                internal::BufferCompat<T, U>::value>::type* = nullptr>
+            typename std::enable_if_t<internal::BufferCompat<T, U>::value>>
   BufferT(const U* data, size_t size) : BufferT(data, size, size) {}
 
   template <typename U,
-            typename std::enable_if<
-                internal::BufferCompat<T, U>::value>::type* = nullptr>
+            typename std::enable_if_t<internal::BufferCompat<T, U>::value>>
   BufferT(U* data, size_t size, size_t capacity) : BufferT(size, capacity) {
-    static_assert(sizeof(T) == sizeof(U), "");
+    static_assert(sizeof(T) == sizeof(U));
     std::memcpy(data_.get(), data, size * sizeof(U));
   }
 
   // Construct a buffer from the contents of an array.
-  template <typename U,
-            size_t N,
-            typename std::enable_if<
-                internal::BufferCompat<T, U>::value>::type* = nullptr>
-  BufferT(U (&array)[N]) : BufferT(array, N) {}
+  // TODO(youfa) : use std::<array> instead of raw array
+  // template <typename U,
+  //          size_t N,
+  //          typename std::enable_if_t<internal::BufferCompat<T, U>::value>>
+  // BufferT(U (&array)[N]) : BufferT(array, N) {}
 
   ~BufferT() { MaybeZeroCompleteBuffer(); }
 
@@ -117,16 +117,14 @@ class BufferT {
   // T is a byte-sized integer, you may also use .data<U>() for any other
   // byte-sized integer U.
   template <typename U = T,
-            typename std::enable_if<
-                internal::BufferCompat<T, U>::value>::type* = nullptr>
+            typename std::enable_if_t<internal::BufferCompat<T, U>::value>>
   const U* data() const {
     AVE_DCHECK(IsConsistent());
     return reinterpret_cast<U*>(data_.get());
   }
 
   template <typename U = T,
-            typename std::enable_if<
-                internal::BufferCompat<T, U>::value>::type* = nullptr>
+            typename std::enable_if_t<internal::BufferCompat<T, U>::value>>
   U* data() {
     AVE_DCHECK(IsConsistent());
     return reinterpret_cast<U*>(data_.get());
@@ -198,8 +196,7 @@ class BufferT {
   // The SetData functions replace the contents of the buffer. They accept the
   // same input types as the constructors.
   template <typename U,
-            typename std::enable_if<
-                internal::BufferCompat<T, U>::value>::type* = nullptr>
+            typename std::enable_if_t<internal::BufferCompat<T, U>::value>>
   void SetData(const U* data, size_t size) {
     AVE_DCHECK(IsConsistent());
     const size_t old_size = size_;
@@ -212,15 +209,13 @@ class BufferT {
 
   template <typename U,
             size_t N,
-            typename std::enable_if<
-                internal::BufferCompat<T, U>::value>::type* = nullptr>
+            typename std::enable_if_t<internal::BufferCompat<T, U>::value>>
   void SetData(const U (&array)[N]) {
     SetData(array, N);
   }
 
   template <typename W,
-            typename std::enable_if<
-                HasDataAndSize<const W, const T>::value>::type* = nullptr>
+            typename std::enable_if_t<HasDataAndSize<const W, const T>::value>>
   void SetData(const W& w) {
     SetData(w.data(), w.size());
   }
@@ -236,8 +231,7 @@ class BufferT {
   // the whole ArrayView, it should leave the unused space at the end.)
   template <typename U = T,
             typename F,
-            typename std::enable_if<
-                internal::BufferCompat<T, U>::value>::type* = nullptr>
+            typename std::enable_if_t<internal::BufferCompat<T, U>::value>>
   size_t SetData(size_t max_elements, F&& setter) {
     AVE_DCHECK(IsConsistent());
     const size_t old_size = size_;
@@ -252,13 +246,12 @@ class BufferT {
   // The AppendData functions add data to the end of the buffer. They accept
   // the same input types as the constructors.
   template <typename U,
-            typename std::enable_if<
-                internal::BufferCompat<T, U>::value>::type* = nullptr>
+            typename std::enable_if_t<internal::BufferCompat<T, U>::value>>
   void AppendData(const U* data, size_t size) {
     AVE_DCHECK(IsConsistent());
     const size_t new_size = size_ + size;
     EnsureCapacityWithHeadroom(new_size, true);
-    static_assert(sizeof(T) == sizeof(U), "");
+    static_assert(sizeof(T) == sizeof(U));
     std::memcpy(data_.get() + size_, data, size * sizeof(U));
     size_ = new_size;
     AVE_DCHECK(IsConsistent());
@@ -266,22 +259,19 @@ class BufferT {
 
   template <typename U,
             size_t N,
-            typename std::enable_if<
-                internal::BufferCompat<T, U>::value>::type* = nullptr>
+            typename std::enable_if_t<internal::BufferCompat<T, U>::value>>
   void AppendData(const U (&array)[N]) {
     AppendData(array, N);
   }
 
   template <typename W,
-            typename std::enable_if<
-                HasDataAndSize<const W, const T>::value>::type* = nullptr>
+            typename std::enable_if_t<HasDataAndSize<const W, const T>::value>>
   void AppendData(const W& w) {
     AppendData(w.data(), w.size());
   }
 
   template <typename U,
-            typename std::enable_if<
-                internal::BufferCompat<T, U>::value>::type* = nullptr>
+            typename std::enable_if_t<internal::BufferCompat<T, U>::value>>
   void AppendData(const U& item) {
     AppendData(&item, 1);
   }
@@ -297,8 +287,7 @@ class BufferT {
   // the whole ArrayView, it should leave the unused space at the end.)
   template <typename U = T,
             typename F,
-            typename std::enable_if<
-                internal::BufferCompat<T, U>::value>::type* = nullptr>
+            typename std::enable_if_t<internal::BufferCompat<T, U>::value>>
   size_t AppendData(size_t max_elements, F&& setter) {
     AVE_DCHECK(IsConsistent());
     const size_t old_size = size_;
@@ -353,8 +342,9 @@ class BufferT {
  private:
   void EnsureCapacityWithHeadroom(size_t capacity, bool extra_headroom) {
     AVE_DCHECK(IsConsistent());
-    if (capacity <= capacity_)
+    if (capacity <= capacity_) {
       return;
+    }
 
     // If the caller asks for extra headroom, ensure that the new capacity is
     // >= 1.5 times the old capacity. Any constant > 1 is sufficient to prevent
@@ -416,9 +406,9 @@ class BufferT {
 #endif
   }
 
-  size_t size_;
-  size_t capacity_;
-  std::unique_ptr<T[]> data_;
+  size_t size_ = 0;
+  size_t capacity_ = 0;
+  std::unique_ptr<std::array<T>> data_;
 };
 
 // By far the most common sort of buffer.
diff --git a/checks.h b/checks.h
index cef9171..a37c3d3 100644
--- a/checks.h
+++ b/checks.h
@@ -85,7 +85,7 @@ class LogMessage {
 
   ~LogMessage() { std::cerr << "\n"; }
 
-  std::ostream& stream() { return std::cerr; }
+  static std::ostream& stream() { return std::cerr; }
 
  private:
   AVE_DISALLOW_COPY_AND_ASSIGN(LogMessage);
diff --git a/task_util/repeating_task.cc b/task_util/repeating_task.cc
index 735f33b..590d3b9 100644
--- a/task_util/repeating_task.cc
+++ b/task_util/repeating_task.cc
@@ -10,11 +10,9 @@
 #include <algorithm>
 #include <chrono>
 #include <cstdint>
-#include <iterator>
 #include <memory>
 #include <utility>
 
-#include "base/logging.h"
 #include "base/task_util/pending_task_flag.h"
 
 namespace ave {
@@ -41,9 +39,9 @@ bool RepeatingTaskBase::Run() {
     return true;
   }
 
-  int64_t delay = RunClosure();
+  auto delay = static_cast<int64_t>(RunClosure());
 
-  int64_t lost_time = GetNowUs() - next_run_time_;
+  auto lost_time = static_cast<int64_t>(GetNowUs()) - next_run_time_;
   next_run_time_ += delay;
   delay -= lost_time;
   delay = std::max<int64_t>(delay, 0LL);
diff --git a/task_util/task_runner_stdlib.cc b/task_util/task_runner_stdlib.cc
index 713066c..3141df0 100644
--- a/task_util/task_runner_stdlib.cc
+++ b/task_util/task_runner_stdlib.cc
@@ -50,7 +50,7 @@ int TaskRunnerPriorityToStdlibPriority(TaskRunnerFactory::Priority priority) {
 class TaskRunnerStdlib final : public TaskRunnerBase {
  public:
   TaskRunnerStdlib(const char* name, int priority);
-  virtual ~TaskRunnerStdlib() override = default;
+  ~TaskRunnerStdlib() override = default;
 
   void Destruct() override;
   void PostTask(std::unique_ptr<Task> task) override;
@@ -115,6 +115,11 @@ void TaskRunnerStdlib::Destruct() {
     need_quit_ = true;
   }
   task_condition_.notify_one();
+  // wait for thread exit
+  AVE_LOG(LS_INFO) << "Destruct";
+  thread_->join();
+  AVE_LOG(LS_INFO) << "Destruct end";
+  delete this;
 }
 
 void TaskRunnerStdlib::PostTask(std::unique_ptr<Task> task) {
@@ -127,7 +132,7 @@ void TaskRunnerStdlib::PostDelayedTask(std::unique_ptr<Task> task,
   if (need_quit_) {
     return;
   }
-  uint64_t when_us;
+  uint64_t when_us = 0;
   if (delay_us > 0) {
     uint64_t now_us = GetNowUs();
     when_us = (delay_us > (std::numeric_limits<uint64_t>::max() - now_us)
@@ -147,7 +152,7 @@ void TaskRunnerStdlib::PostDelayedTask(std::unique_ptr<Task> task,
 
 bool TaskRunnerStdlib::Looping() {
   std::lock_guard<std::mutex> guard(mutex_);
-  return !need_quit_ || !task_queue_.empty();
+  return !need_quit_;  //|| !task_queue_.empty();
 }
 
 void TaskRunnerStdlib::ProcessTask() {
@@ -155,12 +160,12 @@ void TaskRunnerStdlib::ProcessTask() {
     std::unique_ptr<Task> task;
     {
       std::unique_lock<std::mutex> l(mutex_);
-      if (task_queue_.size() == 0) {
+      if (task_queue_.empty()) {
         task_condition_.wait(l);
         continue;
       }
 
-      auto& entry = task_queue_.top();
+      const auto& entry = task_queue_.top();
       uint64_t now_ms = GetNowUs();
       if (entry->when_us_ > now_ms) {
         uint64_t delay_us = entry->when_us_ - now_ms;
@@ -178,7 +183,6 @@ void TaskRunnerStdlib::ProcessTask() {
     if (release_ptr->Run()) {
       delete release_ptr;
     }
-    continue;
   }
 }
 
diff --git a/test/repeating_task_unittest.cc b/test/repeating_task_unittest.cc
index b90d022..f1abd71 100644
--- a/test/repeating_task_unittest.cc
+++ b/test/repeating_task_unittest.cc
@@ -21,14 +21,14 @@ namespace ave {
 namespace base {
 
 TEST(RepeatingTaskTest, Example) {
-  base::TaskRunnerForTest task_runner("TestRunner");
   std::mutex m;
   std::condition_variable cv;
   std::unique_lock<std::mutex> l(m);
   int i = 0;
 
+  base::TaskRunnerForTest task_runner("TestRunner");
   RepeatingTaskHandle::Start(task_runner.Get(), [&i, &cv]() {
-    // AVE_LOG(LS_INFO) << "RepeatingTaskTest";
+    AVE_LOG(LS_INFO) << "RepeatingTaskTest";
     if (i++ == 100) {
       cv.notify_one();
     }
diff --git a/units/time_delta.h b/units/time_delta.h
index acbb6dd..3186f60 100644
--- a/units/time_delta.h
+++ b/units/time_delta.h
@@ -8,7 +8,6 @@
 #ifndef TIME_DELTA_H
 #define TIME_DELTA_H
 
-#include <cstdlib>
 #include <string>
 #include <type_traits>
 
@@ -28,22 +27,22 @@ class TimeDelta final : public unit_impl::RelativeUnit<TimeDelta> {
  public:
   template <typename T>
   static constexpr TimeDelta Minutes(T value) {
-    static_assert(std::is_arithmetic<T>::value, "");
+    static_assert(std::is_arithmetic_v<T>);
     return Seconds(value * 60);
   }
   template <typename T>
   static constexpr TimeDelta Seconds(T value) {
-    static_assert(std::is_arithmetic<T>::value, "");
+    static_assert(std::is_arithmetic_v<T>);
     return FromFraction(1'000'000, value);
   }
   template <typename T>
   static constexpr TimeDelta Millis(T value) {
-    static_assert(std::is_arithmetic<T>::value, "");
+    static_assert(std::is_arithmetic_v<T>);
     return FromFraction(1'000, value);
   }
   template <typename T>
   static constexpr TimeDelta Micros(T value) {
-    static_assert(std::is_arithmetic<T>::value, "");
+    static_assert(std::is_arithmetic_v<T>);
     return FromValue(value);
   }
 
